locals {
  # Parse the file path we're in to read the env name: e.g., env 
  # will be "devopssandbox" or "development"  
  # etc.
  parsed = regex(".*/environments/(?P<env>.*?)/.*", get_terragrunt_dir())
  env    = local.parsed.env

  account_vars = read_terragrunt_config(find_in_parent_folders("account.hcl"))
  aws_role_arn = local.account_vars.locals.aws_role_arn

  region_vars = read_terragrunt_config(find_in_parent_folders("region.hcl"))
  aws_region  = local.region_vars.locals.aws_region
}

# Generate an AWS provider block
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
provider "aws" {
  region = "${local.aws_region}"

  assume_role {
    role_arn = "${local.aws_role_arn}"
  }
}
EOF
}

# Configure S3 as a backend
remote_state {
  backend = "s3"
  config = {
    bucket         = "terraform-playq-poc-${local.env}"
    region         = "${local.aws_region}"
    key            = "${path_relative_to_include()}/tf.tfstate"
    encrypt        = true
    dynamodb_table = "terraform-playq-poc-${local.env}"
  }

  # generate (attribute): Configure Terragrunt to automatically generate a
  # .tf file that configures the remote state backend. This is a map that
  # expects two properties:

  # path: The path where the generated file should be written. If a
  # relative path, itâ€™ll be relative to the Terragrunt working dir (where
  # the OpenTofu/Terraform code lives).

  # if_exists (attribute): What to do if a file already exists at path.

  # Valid values are:
  # overwrite (overwrite the existing file)
  # overwrite_terragrunt (overwrite the existing file if it was
  # generated by terragrunt; otherwise, error)
  # skip (skip code generation and leave the existing file as-is)
  # error (exit with an error)
  generate = {
    path      = "backend.tf"
    if_exists = "skip"
  }
}

# Configure root level variables that all resources can inherit. This is especially helpful with multi-account configs
# where terraform_remote_state data sources are placed directly into the modules.
inputs = merge(
  local.account_vars.locals,
  local.region_vars.locals,
  local.environment_vars.locals,
)
